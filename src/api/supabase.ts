/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/events": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.events.id"];
          inserted_at?: parameters["rowFilter.events.inserted_at"];
          updated_at?: parameters["rowFilter.events.updated_at"];
          title?: parameters["rowFilter.events.title"];
          date?: parameters["rowFilter.events.date"];
          description?: parameters["rowFilter.events.description"];
          mandatory?: parameters["rowFilter.events.mandatory"];
          /** The location of the Event */
          location?: parameters["rowFilter.events.location"];
          /** Obligatory for participants who want to have the Schlüsselqualifikation points */
          sq_mandatory?: parameters["rowFilter.events.sq_mandatory"];
          type?: parameters["rowFilter.events.type"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["events"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** events */
          events?: definitions["events"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.events.id"];
          inserted_at?: parameters["rowFilter.events.inserted_at"];
          updated_at?: parameters["rowFilter.events.updated_at"];
          title?: parameters["rowFilter.events.title"];
          date?: parameters["rowFilter.events.date"];
          description?: parameters["rowFilter.events.description"];
          mandatory?: parameters["rowFilter.events.mandatory"];
          /** The location of the Event */
          location?: parameters["rowFilter.events.location"];
          /** Obligatory for participants who want to have the Schlüsselqualifikation points */
          sq_mandatory?: parameters["rowFilter.events.sq_mandatory"];
          type?: parameters["rowFilter.events.type"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.events.id"];
          inserted_at?: parameters["rowFilter.events.inserted_at"];
          updated_at?: parameters["rowFilter.events.updated_at"];
          title?: parameters["rowFilter.events.title"];
          date?: parameters["rowFilter.events.date"];
          description?: parameters["rowFilter.events.description"];
          mandatory?: parameters["rowFilter.events.mandatory"];
          /** The location of the Event */
          location?: parameters["rowFilter.events.location"];
          /** Obligatory for participants who want to have the Schlüsselqualifikation points */
          sq_mandatory?: parameters["rowFilter.events.sq_mandatory"];
          type?: parameters["rowFilter.events.type"];
        };
        body: {
          /** events */
          events?: definitions["events"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/faqs": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.faqs.id"];
          created_at?: parameters["rowFilter.faqs.created_at"];
          question?: parameters["rowFilter.faqs.question"];
          answer?: parameters["rowFilter.faqs.answer"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["faqs"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** faqs */
          faqs?: definitions["faqs"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.faqs.id"];
          created_at?: parameters["rowFilter.faqs.created_at"];
          question?: parameters["rowFilter.faqs.question"];
          answer?: parameters["rowFilter.faqs.answer"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.faqs.id"];
          created_at?: parameters["rowFilter.faqs.created_at"];
          question?: parameters["rowFilter.faqs.question"];
          answer?: parameters["rowFilter.faqs.answer"];
        };
        body: {
          /** faqs */
          faqs?: definitions["faqs"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/event_registrations": {
    get: {
      parameters: {
        query: {
          inserted_at?: parameters["rowFilter.event_registrations.inserted_at"];
          user_id?: parameters["rowFilter.event_registrations.user_id"];
          event_id?: parameters["rowFilter.event_registrations.event_id"];
          present?: parameters["rowFilter.event_registrations.present"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["event_registrations"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** event_registrations */
          event_registrations?: definitions["event_registrations"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          inserted_at?: parameters["rowFilter.event_registrations.inserted_at"];
          user_id?: parameters["rowFilter.event_registrations.user_id"];
          event_id?: parameters["rowFilter.event_registrations.event_id"];
          present?: parameters["rowFilter.event_registrations.present"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          inserted_at?: parameters["rowFilter.event_registrations.inserted_at"];
          user_id?: parameters["rowFilter.event_registrations.user_id"];
          event_id?: parameters["rowFilter.event_registrations.event_id"];
          present?: parameters["rowFilter.event_registrations.present"];
        };
        body: {
          /** event_registrations */
          event_registrations?: definitions["event_registrations"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/teams": {
    get: {
      parameters: {
        query: {
          inserted_at?: parameters["rowFilter.teams.inserted_at"];
          id?: parameters["rowFilter.teams.id"];
          name?: parameters["rowFilter.teams.name"];
          description?: parameters["rowFilter.teams.description"];
          tags?: parameters["rowFilter.teams.tags"];
          logo?: parameters["rowFilter.teams.logo"];
          archived?: parameters["rowFilter.teams.archived"];
          requestSupport?: parameters["rowFilter.teams.requestSupport"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["teams"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** teams */
          teams?: definitions["teams"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          inserted_at?: parameters["rowFilter.teams.inserted_at"];
          id?: parameters["rowFilter.teams.id"];
          name?: parameters["rowFilter.teams.name"];
          description?: parameters["rowFilter.teams.description"];
          tags?: parameters["rowFilter.teams.tags"];
          logo?: parameters["rowFilter.teams.logo"];
          archived?: parameters["rowFilter.teams.archived"];
          requestSupport?: parameters["rowFilter.teams.requestSupport"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          inserted_at?: parameters["rowFilter.teams.inserted_at"];
          id?: parameters["rowFilter.teams.id"];
          name?: parameters["rowFilter.teams.name"];
          description?: parameters["rowFilter.teams.description"];
          tags?: parameters["rowFilter.teams.tags"];
          logo?: parameters["rowFilter.teams.logo"];
          archived?: parameters["rowFilter.teams.archived"];
          requestSupport?: parameters["rowFilter.teams.requestSupport"];
        };
        body: {
          /** teams */
          teams?: definitions["teams"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/team_requests": {
    get: {
      parameters: {
        query: {
          inserted_at?: parameters["rowFilter.team_requests.inserted_at"];
          user_id?: parameters["rowFilter.team_requests.user_id"];
          team_id?: parameters["rowFilter.team_requests.team_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["team_requests"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** team_requests */
          team_requests?: definitions["team_requests"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          inserted_at?: parameters["rowFilter.team_requests.inserted_at"];
          user_id?: parameters["rowFilter.team_requests.user_id"];
          team_id?: parameters["rowFilter.team_requests.team_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          inserted_at?: parameters["rowFilter.team_requests.inserted_at"];
          user_id?: parameters["rowFilter.team_requests.user_id"];
          team_id?: parameters["rowFilter.team_requests.team_id"];
        };
        body: {
          /** team_requests */
          team_requests?: definitions["team_requests"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/team_members": {
    get: {
      parameters: {
        query: {
          inserted_at?: parameters["rowFilter.team_members.inserted_at"];
          user_id?: parameters["rowFilter.team_members.user_id"];
          team_id?: parameters["rowFilter.team_members.team_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["team_members"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** team_members */
          team_members?: definitions["team_members"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          inserted_at?: parameters["rowFilter.team_members.inserted_at"];
          user_id?: parameters["rowFilter.team_members.user_id"];
          team_id?: parameters["rowFilter.team_members.team_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          inserted_at?: parameters["rowFilter.team_members.inserted_at"];
          user_id?: parameters["rowFilter.team_members.user_id"];
          team_id?: parameters["rowFilter.team_members.team_id"];
        };
        body: {
          /** team_members */
          team_members?: definitions["team_members"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/event_backup19_08_2022": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.event_backup19_08_2022.id"];
          inserted_at?: parameters["rowFilter.event_backup19_08_2022.inserted_at"];
          updated_at?: parameters["rowFilter.event_backup19_08_2022.updated_at"];
          title?: parameters["rowFilter.event_backup19_08_2022.title"];
          date?: parameters["rowFilter.event_backup19_08_2022.date"];
          description?: parameters["rowFilter.event_backup19_08_2022.description"];
          online?: parameters["rowFilter.event_backup19_08_2022.online"];
          mandatory?: parameters["rowFilter.event_backup19_08_2022.mandatory"];
          type_id?: parameters["rowFilter.event_backup19_08_2022.type_id"];
          location?: parameters["rowFilter.event_backup19_08_2022.location"];
          sq_mandatory?: parameters["rowFilter.event_backup19_08_2022.sq_mandatory"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["event_backup19_08_2022"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** event_backup19_08_2022 */
          event_backup19_08_2022?: definitions["event_backup19_08_2022"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.event_backup19_08_2022.id"];
          inserted_at?: parameters["rowFilter.event_backup19_08_2022.inserted_at"];
          updated_at?: parameters["rowFilter.event_backup19_08_2022.updated_at"];
          title?: parameters["rowFilter.event_backup19_08_2022.title"];
          date?: parameters["rowFilter.event_backup19_08_2022.date"];
          description?: parameters["rowFilter.event_backup19_08_2022.description"];
          online?: parameters["rowFilter.event_backup19_08_2022.online"];
          mandatory?: parameters["rowFilter.event_backup19_08_2022.mandatory"];
          type_id?: parameters["rowFilter.event_backup19_08_2022.type_id"];
          location?: parameters["rowFilter.event_backup19_08_2022.location"];
          sq_mandatory?: parameters["rowFilter.event_backup19_08_2022.sq_mandatory"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.event_backup19_08_2022.id"];
          inserted_at?: parameters["rowFilter.event_backup19_08_2022.inserted_at"];
          updated_at?: parameters["rowFilter.event_backup19_08_2022.updated_at"];
          title?: parameters["rowFilter.event_backup19_08_2022.title"];
          date?: parameters["rowFilter.event_backup19_08_2022.date"];
          description?: parameters["rowFilter.event_backup19_08_2022.description"];
          online?: parameters["rowFilter.event_backup19_08_2022.online"];
          mandatory?: parameters["rowFilter.event_backup19_08_2022.mandatory"];
          type_id?: parameters["rowFilter.event_backup19_08_2022.type_id"];
          location?: parameters["rowFilter.event_backup19_08_2022.location"];
          sq_mandatory?: parameters["rowFilter.event_backup19_08_2022.sq_mandatory"];
        };
        body: {
          /** event_backup19_08_2022 */
          event_backup19_08_2022?: definitions["event_backup19_08_2022"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/profiles": {
    get: {
      parameters: {
        query: {
          user_id?: parameters["rowFilter.profiles.user_id"];
          inserted_at?: parameters["rowFilter.profiles.inserted_at"];
          first_name?: parameters["rowFilter.profiles.first_name"];
          last_name?: parameters["rowFilter.profiles.last_name"];
          email?: parameters["rowFilter.profiles.email"];
          gender?: parameters["rowFilter.profiles.gender"];
          phone?: parameters["rowFilter.profiles.phone"];
          studies?: parameters["rowFilter.profiles.studies"];
          university?: parameters["rowFilter.profiles.university"];
          homeland?: parameters["rowFilter.profiles.homeland"];
          avatar?: parameters["rowFilter.profiles.avatar"];
          role?: parameters["rowFilter.profiles.role"];
          skills?: parameters["rowFilter.profiles.skills"];
          bio?: parameters["rowFilter.profiles.bio"];
          /** used to determine if the person want to use grow as key qualification */
          keyQualification?: parameters["rowFilter.profiles.keyQualification"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["profiles"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** profiles */
          profiles?: definitions["profiles"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          user_id?: parameters["rowFilter.profiles.user_id"];
          inserted_at?: parameters["rowFilter.profiles.inserted_at"];
          first_name?: parameters["rowFilter.profiles.first_name"];
          last_name?: parameters["rowFilter.profiles.last_name"];
          email?: parameters["rowFilter.profiles.email"];
          gender?: parameters["rowFilter.profiles.gender"];
          phone?: parameters["rowFilter.profiles.phone"];
          studies?: parameters["rowFilter.profiles.studies"];
          university?: parameters["rowFilter.profiles.university"];
          homeland?: parameters["rowFilter.profiles.homeland"];
          avatar?: parameters["rowFilter.profiles.avatar"];
          role?: parameters["rowFilter.profiles.role"];
          skills?: parameters["rowFilter.profiles.skills"];
          bio?: parameters["rowFilter.profiles.bio"];
          /** used to determine if the person want to use grow as key qualification */
          keyQualification?: parameters["rowFilter.profiles.keyQualification"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          user_id?: parameters["rowFilter.profiles.user_id"];
          inserted_at?: parameters["rowFilter.profiles.inserted_at"];
          first_name?: parameters["rowFilter.profiles.first_name"];
          last_name?: parameters["rowFilter.profiles.last_name"];
          email?: parameters["rowFilter.profiles.email"];
          gender?: parameters["rowFilter.profiles.gender"];
          phone?: parameters["rowFilter.profiles.phone"];
          studies?: parameters["rowFilter.profiles.studies"];
          university?: parameters["rowFilter.profiles.university"];
          homeland?: parameters["rowFilter.profiles.homeland"];
          avatar?: parameters["rowFilter.profiles.avatar"];
          role?: parameters["rowFilter.profiles.role"];
          skills?: parameters["rowFilter.profiles.skills"];
          bio?: parameters["rowFilter.profiles.bio"];
          /** used to determine if the person want to use grow as key qualification */
          keyQualification?: parameters["rowFilter.profiles.keyQualification"];
        };
        body: {
          /** profiles */
          profiles?: definitions["profiles"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/sponsors": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.sponsors.id"];
          created_at?: parameters["rowFilter.sponsors.created_at"];
          name?: parameters["rowFilter.sponsors.name"];
          logo?: parameters["rowFilter.sponsors.logo"];
          link?: parameters["rowFilter.sponsors.link"];
          type?: parameters["rowFilter.sponsors.type"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["sponsors"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** sponsors */
          sponsors?: definitions["sponsors"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.sponsors.id"];
          created_at?: parameters["rowFilter.sponsors.created_at"];
          name?: parameters["rowFilter.sponsors.name"];
          logo?: parameters["rowFilter.sponsors.logo"];
          link?: parameters["rowFilter.sponsors.link"];
          type?: parameters["rowFilter.sponsors.type"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.sponsors.id"];
          created_at?: parameters["rowFilter.sponsors.created_at"];
          name?: parameters["rowFilter.sponsors.name"];
          logo?: parameters["rowFilter.sponsors.logo"];
          link?: parameters["rowFilter.sponsors.link"];
          type?: parameters["rowFilter.sponsors.type"];
        };
        body: {
          /** sponsors */
          sponsors?: definitions["sponsors"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/rpc/isadmin": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: uuid */
            user_id: string;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/accept_request": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: uuid */
            requesting_user_id: string;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
}

export interface definitions {
  events: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default timezone('utc'::text, now())
     */
    inserted_at: string;
    /**
     * Format: timestamp with time zone
     * @default timezone('utc'::text, now())
     */
    updated_at: string;
    /**
     * Format: text
     * @default
     */
    title: string;
    /**
     * Format: timestamp without time zone
     * @default now()
     */
    date: string;
    /**
     * Format: text
     * @default
     */
    description: string;
    /**
     * Format: boolean
     * @default false
     */
    mandatory: boolean;
    /**
     * Format: text
     * @description The location of the Event
     */
    location: string;
    /**
     * Format: boolean
     * @description Obligatory for participants who want to have the Schlüsselqualifikation points
     * @default false
     */
    sq_mandatory: boolean;
    /**
     * Format: public.enum_event_type
     * @enum {string}
     */
    type?: "Online" | "Offline" | "Hybrid";
  };
  faqs: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /**
     * Format: text
     * @default
     */
    question?: string;
    /**
     * Format: text
     * @default
     */
    answer?: string;
  };
  event_registrations: {
    /**
     * Format: timestamp with time zone
     * @default timezone('utc'::text, now())
     */
    inserted_at: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `profiles.user_id`.<fk table='profiles' column='user_id'/>
     */
    user_id: string;
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `events.id`.<fk table='events' column='id'/>
     */
    event_id: number;
    /**
     * Format: boolean
     * @default false
     */
    present: boolean;
  };
  teams: {
    /**
     * Format: timestamp with time zone
     * @default timezone('utc'::text, now())
     */
    inserted_at: string;
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: text
     * @default
     */
    name: string;
    /**
     * Format: text
     * @default
     */
    description: string;
    /** Format: json */
    tags: unknown;
    /**
     * Format: text
     * @default
     */
    logo?: string;
    /**
     * Format: boolean
     * @default false
     */
    archived: boolean;
    /** Format: json */
    requestSupport: unknown;
  };
  team_requests: {
    /**
     * Format: timestamp with time zone
     * @default timezone('utc'::text, now())
     */
    inserted_at: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `profiles.user_id`.<fk table='profiles' column='user_id'/>
     */
    user_id: string;
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `teams.id`.<fk table='teams' column='id'/>
     */
    team_id: number;
  };
  team_members: {
    /**
     * Format: timestamp with time zone
     * @default timezone('utc'::text, now())
     */
    inserted_at: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `profiles.user_id`.<fk table='profiles' column='user_id'/>
     */
    user_id: string;
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `teams.id`.<fk table='teams' column='id'/>
     */
    team_id: number;
  };
  event_backup19_08_2022: {
    /** Format: bigint */
    id?: number;
    /** Format: timestamp with time zone */
    inserted_at?: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /** Format: text */
    title?: string;
    /** Format: timestamp without time zone */
    date?: string;
    /** Format: text */
    description?: string;
    /** Format: boolean */
    online?: boolean;
    /** Format: boolean */
    mandatory?: boolean;
    /** Format: bigint */
    type_id?: number;
    /** Format: text */
    location?: string;
    /** Format: boolean */
    sq_mandatory?: boolean;
  };
  profiles: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    user_id: string;
    /**
     * Format: timestamp with time zone
     * @default timezone('utc'::text, now())
     */
    inserted_at: string;
    /**
     * Format: text
     * @default
     */
    first_name: string;
    /**
     * Format: text
     * @default
     */
    last_name: string;
    /**
     * Format: text
     * @default
     */
    email: string;
    /**
     * Format: public.gender
     * @default OTHER
     * @enum {string}
     */
    gender?: "MALE" | "FEMALE" | "OTHER";
    /** Format: text */
    phone?: string;
    /** Format: text */
    studies?: string;
    /** Format: text */
    university?: string;
    /** Format: text */
    homeland?: string;
    /** Format: text */
    avatar?: string;
    /**
     * Format: public.user_role
     * @default PARTICIPANT
     * @enum {string}
     */
    role: "PARTICIPANT" | "BUDDY" | "MENTOR" | "EXPERT" | "ORGA";
    /** Format: json */
    skills: unknown;
    /** Format: text */
    bio?: string;
    /**
     * Format: boolean
     * @description used to determine if the person want to use grow as key qualification
     * @default false
     */
    keyQualification: boolean;
  };
  sponsors: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /**
     * Format: text
     * @default
     */
    name: string;
    /**
     * Format: text
     * @default
     */
    logo: string;
    /**
     * Format: text
     * @default
     */
    link: string;
    /**
     * Format: public.sponsor_type
     * @enum {string}
     */
    type: "GOLD" | "SILVER" | "BRONZE" | "FLAGSHIP";
  };
}

export interface parameters {
  /**
   * @description Preference
   * @enum {string}
   */
  preferParams: "params=single-object";
  /**
   * @description Preference
   * @enum {string}
   */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /**
   * @description Preference
   * @enum {string}
   */
  preferCount: "count=none";
  /** @description Filtering Columns */
  select: string;
  /** @description On Conflict */
  on_conflict: string;
  /** @description Ordering */
  order: string;
  /** @description Limiting and Pagination */
  range: string;
  /**
   * @description Limiting and Pagination
   * @default items
   */
  rangeUnit: string;
  /** @description Limiting and Pagination */
  offset: string;
  /** @description Limiting and Pagination */
  limit: string;
  /** @description events */
  "body.events": definitions["events"];
  /** Format: bigint */
  "rowFilter.events.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.events.inserted_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.events.updated_at": string;
  /** Format: text */
  "rowFilter.events.title": string;
  /** Format: timestamp without time zone */
  "rowFilter.events.date": string;
  /** Format: text */
  "rowFilter.events.description": string;
  /** Format: boolean */
  "rowFilter.events.mandatory": string;
  /**
   * Format: text
   * @description The location of the Event
   */
  "rowFilter.events.location": string;
  /**
   * Format: boolean
   * @description Obligatory for participants who want to have the Schlüsselqualifikation points
   */
  "rowFilter.events.sq_mandatory": string;
  /** Format: public.enum_event_type */
  "rowFilter.events.type": string;
  /** @description faqs */
  "body.faqs": definitions["faqs"];
  /** Format: bigint */
  "rowFilter.faqs.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.faqs.created_at": string;
  /** Format: text */
  "rowFilter.faqs.question": string;
  /** Format: text */
  "rowFilter.faqs.answer": string;
  /** @description event_registrations */
  "body.event_registrations": definitions["event_registrations"];
  /** Format: timestamp with time zone */
  "rowFilter.event_registrations.inserted_at": string;
  /** Format: uuid */
  "rowFilter.event_registrations.user_id": string;
  /** Format: bigint */
  "rowFilter.event_registrations.event_id": string;
  /** Format: boolean */
  "rowFilter.event_registrations.present": string;
  /** @description teams */
  "body.teams": definitions["teams"];
  /** Format: timestamp with time zone */
  "rowFilter.teams.inserted_at": string;
  /** Format: bigint */
  "rowFilter.teams.id": string;
  /** Format: text */
  "rowFilter.teams.name": string;
  /** Format: text */
  "rowFilter.teams.description": string;
  /** Format: json */
  "rowFilter.teams.tags": string;
  /** Format: text */
  "rowFilter.teams.logo": string;
  /** Format: boolean */
  "rowFilter.teams.archived": string;
  /** Format: json */
  "rowFilter.teams.requestSupport": string;
  /** @description team_requests */
  "body.team_requests": definitions["team_requests"];
  /** Format: timestamp with time zone */
  "rowFilter.team_requests.inserted_at": string;
  /** Format: uuid */
  "rowFilter.team_requests.user_id": string;
  /** Format: bigint */
  "rowFilter.team_requests.team_id": string;
  /** @description team_members */
  "body.team_members": definitions["team_members"];
  /** Format: timestamp with time zone */
  "rowFilter.team_members.inserted_at": string;
  /** Format: uuid */
  "rowFilter.team_members.user_id": string;
  /** Format: bigint */
  "rowFilter.team_members.team_id": string;
  /** @description event_backup19_08_2022 */
  "body.event_backup19_08_2022": definitions["event_backup19_08_2022"];
  /** Format: bigint */
  "rowFilter.event_backup19_08_2022.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.event_backup19_08_2022.inserted_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.event_backup19_08_2022.updated_at": string;
  /** Format: text */
  "rowFilter.event_backup19_08_2022.title": string;
  /** Format: timestamp without time zone */
  "rowFilter.event_backup19_08_2022.date": string;
  /** Format: text */
  "rowFilter.event_backup19_08_2022.description": string;
  /** Format: boolean */
  "rowFilter.event_backup19_08_2022.online": string;
  /** Format: boolean */
  "rowFilter.event_backup19_08_2022.mandatory": string;
  /** Format: bigint */
  "rowFilter.event_backup19_08_2022.type_id": string;
  /** Format: text */
  "rowFilter.event_backup19_08_2022.location": string;
  /** Format: boolean */
  "rowFilter.event_backup19_08_2022.sq_mandatory": string;
  /** @description profiles */
  "body.profiles": definitions["profiles"];
  /** Format: uuid */
  "rowFilter.profiles.user_id": string;
  /** Format: timestamp with time zone */
  "rowFilter.profiles.inserted_at": string;
  /** Format: text */
  "rowFilter.profiles.first_name": string;
  /** Format: text */
  "rowFilter.profiles.last_name": string;
  /** Format: text */
  "rowFilter.profiles.email": string;
  /** Format: public.gender */
  "rowFilter.profiles.gender": string;
  /** Format: text */
  "rowFilter.profiles.phone": string;
  /** Format: text */
  "rowFilter.profiles.studies": string;
  /** Format: text */
  "rowFilter.profiles.university": string;
  /** Format: text */
  "rowFilter.profiles.homeland": string;
  /** Format: text */
  "rowFilter.profiles.avatar": string;
  /** Format: public.user_role */
  "rowFilter.profiles.role": string;
  /** Format: json */
  "rowFilter.profiles.skills": string;
  /** Format: text */
  "rowFilter.profiles.bio": string;
  /**
   * Format: boolean
   * @description used to determine if the person want to use grow as key qualification
   */
  "rowFilter.profiles.keyQualification": string;
  /** @description sponsors */
  "body.sponsors": definitions["sponsors"];
  /** Format: bigint */
  "rowFilter.sponsors.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.sponsors.created_at": string;
  /** Format: text */
  "rowFilter.sponsors.name": string;
  /** Format: text */
  "rowFilter.sponsors.logo": string;
  /** Format: text */
  "rowFilter.sponsors.link": string;
  /** Format: public.sponsor_type */
  "rowFilter.sponsors.type": string;
}

export interface operations {}

export interface external {}
